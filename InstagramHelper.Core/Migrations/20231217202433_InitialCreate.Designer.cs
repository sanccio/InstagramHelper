// <auto-generated />
using InstagramHelper.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(InstaHelperDbContext))]
    [Migration("20231217202433_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.InstaUser", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("Username");

                    b.ToTable("InstagramUsers");
                });

            modelBuilder.Entity("Core.Models.Story", b =>
                {
                    b.Property<string>("Pk")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "pk");

                    b.Property<string>("InstaUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("TakenAt")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "taken_at");

                    b.HasKey("Pk");

                    b.HasIndex("InstaUserId");

                    b.ToTable("Story");
                });

            modelBuilder.Entity("Core.Models.Subscription", b =>
                {
                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("InstaUsername")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TelegramUserId", "InstaUsername");

                    b.HasIndex("InstaUsername");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Core.Models.TelegramUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TelegramUsers");
                });

            modelBuilder.Entity("Core.Models.Story", b =>
                {
                    b.HasOne("Core.Models.InstaUser", "InstaUser")
                        .WithMany("Stories")
                        .HasForeignKey("InstaUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstaUser");
                });

            modelBuilder.Entity("Core.Models.Subscription", b =>
                {
                    b.HasOne("Core.Models.InstaUser", "InstaUser")
                        .WithMany()
                        .HasForeignKey("InstaUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.TelegramUser", "TelegramUser")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TelegramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstaUser");

                    b.Navigation("TelegramUser");
                });

            modelBuilder.Entity("Core.Models.InstaUser", b =>
                {
                    b.Navigation("Stories");
                });

            modelBuilder.Entity("Core.Models.TelegramUser", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
